题目：

给定一个长度为N的数组，找出一个最长的单调自增子序列（不一定连续，但是顺序不能乱） 例如：给定一个长度为8的数组A{1，3，5，2，4，6，7，8}，则其最长的单调递增子序列为{1，2，4，6，7，8}，长度为6。

输入：数组，数组长度

输出：输出该数组最长递增子序列的长度

解题思想：

1、先对原始数组进行排序，原数组为{1,3,5,2,4,6,7,8},排序后数组为{1,2,3,4,5,6,7,8}


void sort(int *a,int N)
{
  int i=0,j=0;
  int temp;
  for(i=0;i<N;i++)
    for(j=0;j<N-i-1;j++)
      {
	if(*(a+j)>*(a+j+1))
	  {
	    temp=*(a+j);
	    *(a+j)=*(a+j+1);
	    *(a+j+1)=temp;
	  }
      }
}
2、数组排序之后，接下来求两个数组{1,3,5,2,4,6,7,8}和{1,2,3,4,5,6,7,8}数组的的最长公共子序列。
具体求法如下图所示，很多文章都是说从数组底部开始搜索，其实不从底部搜索也是可以的，在我的程序中，就是先创建一个全0的二维数组a，然后从下标i=1,j=1开始搜索，

1）若x(i)=y(j)，则a[i][j]=a[i-1][j-1]+1;

2）若x(i)!=y(j)，则a[i][j]=max(a[i-1][j],a[i][j-1]);

#include<stdio.h>
#include<string.h>
#include<stdlib.h>
//#define N 4
void sort(int *a,int N) //数组排序
{
  int i=0,j=0;
  int temp;
  for(i=0;i<N;i++)
    for(j=0;j<N-i-1;j++)
      {
	if(*(a+j)>*(a+j+1))
	  {
	    temp=*(a+j);
	    *(a+j)=*(a+j+1);
	    *(a+j+1)=temp;
	  }
      }
}
 
int getmax(int x,int y,int z)//求三个数之间最大值
{
  int temp;
  temp=(x>y?x:y);
  temp=(temp>z?temp:z);
  return temp;
}
 
int * intcopy(int *a,int len)//整数数组复制
{
  int *p=malloc(len*sizeof(int));
  memcpy(p,a,len*sizeof(int));
  return p;
}
 
  
void main()
{
  int i,j,N;
  printf("please input the lengt of the array:");
  scanf("%d",&N);//读取数组长度
  int rawarray[N];
  int aimarray[N+1][N+1];
  int *sortarray;
  
  printf("please input the array:");//读取输入数组
  for(i=0;i<N;i++)
    scanf("%d",&rawarray[i]); 
  
  memset(aimarray,0,sizeof(aimarray));//初始化二维数组，设初值为0
  sortarray=intcopy(rawarray,N);
  sort(sortarray,N);
  printf("the origin array is :\n");
  for(i=0;i<N;i++)
  {
    printf("%d ",rawarray[i]);
  }
  printf("\nthe sort array is: \n");
  for(i=0;i<N;i++)
  {
    printf("%d ",*(sortarray+i));
  }
  printf("\n=================================\n");
