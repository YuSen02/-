题目：给你一个整数数组 arr。你可以从中选出一个整数集合，并删除这些整数在数组中的每次出现。

返回 至少 能删除数组中的一半整数的整数集合的最小大小。

 

示例 1：

输入：arr = [3,3,3,3,5,5,5,2,2,7]
输出：2
解释：选择 {3,7} 使得结果数组为 [5,5,5,2,2]、长度为 5（原数组长度的一半）。
大小为 2 的可行集合有 {3,5},{3,2},{5,2}。
选择 {2,7} 是不可行的，它的结果数组为 [3,3,3,3,5,5,5]，新数组长度大于原数组的二分之一。
示例 2：

输入：arr = [7,7,7,7,7,7]
输出：1
解释：我们只能选择集合 {7}，结果数组为空。
示例 3：

输入：arr = [1,9]
输出：1
示例 4：

输入：arr = [1000,1000,3,7]
输出：1
示例 5：

输入：arr = [1,2,3,4,5,6,7,8,9,10]
输出：5
 

提示：

1 <= arr.length <= 10^5
arr.length 为偶数
1 <= arr[i] <= 10^5

每次选最多个数的元素就能以最小数目完成删除，所以直接排序加贪心，排序前记得把稀疏的哈希数组给处理一下。


int cmp(const void *a, const void *b) {
    return *(int*)b - *(int*)a;
}

int minSetSize(int* arr, int arrSize){
    int count[100001] = {0};
    for (int i=0; i<arrSize; ++i) {
        ++count[arr[i]];
    }
    int size = 0;
    for (int i=0; i<100001; ++i) {
        if (count[i]) count[size++] = count[i];
    }
    qsort(count, size, sizeof(int), cmp);
    int half = arrSize / 2;
    int n = 0;
    for (int i=0; i<size; ++i) {
        half -= count[i];
        ++n;
        if (half <= 0) break;
    }
    return n;
}
