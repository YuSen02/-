题目：
给你两个数组，arr1 和 arr2，

arr2 中的元素各不相同
arr2 中的每个元素都出现在 arr1 中
对 arr1 中的元素进行排序，使 arr1 中项的相对顺序和 arr2 中的相对顺序相同。未在 arr2 中出现过的元素需要按照升序放在 arr1 的末尾。

 

示例：

输入：arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]
输出：[2,2,2,1,4,3,3,9,6,7,19]
 

提示：

arr1.length, arr2.length <= 1000
0 <= arr1[i], arr2[i] <= 1000
arr2 中的元素 arr2[i] 各不相同
arr2 中的每个元素 arr2[i] 都出现在 arr1 中

int cmpFun(const void *a, const void *b)
{
    return( *(int *)a - *(int *)b );
}

// 1122数组的相对排序
int* relativeSortArray(int* arr1, int arr1Size, int* arr2, int arr2Size, int* returnSize)
{
    int *flag = (int *)malloc(arr1Size * sizeof(int));
    memset(flag, 0, arr1Size * sizeof(int));

    int *res = (int *)malloc(arr1Size * sizeof(int));
    memset(res, 0, arr1Size * sizeof(int));

    qsort(arr1, arr1Size,sizeof(int), cmpFun);
    int cnt = 0;
    for(int i = 0; i<arr2Size; i++){
        for(int k = 0; k < arr1Size; k++ ){
            if(arr2[i] == arr1[k] && flag[k] == 0){
                res[cnt] = arr1[k];
                cnt++;
                flag[k] = 1;
            }
        }
    }

    for(int k = 0; k < arr1Size; k++ ){
        if(flag[k] == 0){
            res[cnt] = arr1[k];
            cnt++;
            flag[k] = 1;
        }
    }

    free(flag);
    *returnSize = arr1Size;
    return res;
}
