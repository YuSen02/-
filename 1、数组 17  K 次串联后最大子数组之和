题目：给你一个整数数组 arr 和一个整数 k。

首先，我们要对该数组进行修改，即把原数组 arr 重复 k 次。

举个例子，如果 arr = [1, 2] 且 k = 3，那么修改后的数组就是 [1, 2, 1, 2, 1, 2]。

然后，请你返回修改后的数组中的最大的子数组之和。

注意，子数组长度可以是 0，在这种情况下它的总和也是 0。

由于 结果可能会很大，所以需要 模（mod） 10^9 + 7 后再返回。 

 

示例 1：

输入：arr = [1,2], k = 3
输出：9
示例 2：

输入：arr = [1,-2,1], k = 5
输出：2
示例 3：

输入：arr = [-1,-2], k = 7
输出：0
 

提示：

1 <= arr.length <= 10^5
1 <= k <= 10^5
-10^4 <= arr[i] <= 10^4

解题分两种情况：

k = 1: max = 最大子串
k >= 1:
如果数组和>0：max = 最大后子串 + (k - 2)*数组和 + 最大前子串
如果数组和<=0：max = 最大后子串 + 最大前子串
最后max与最大子串做对比，取最大值

#define MOD 1000000007
#define MAX(a,b) (a) > (b) ? (a) : (b)
#define N 100000

long long MaxSub(int *a, int size)
{
    // 求最大子串
    long long maxEndNow = 0;
    long long maxSub = 0;
    for(int i = 0; i < size; i++) {
        maxEndNow = MAX(maxEndNow + a[i], 0);
        maxSub = MAX( maxSub, maxEndNow);
    }
    return maxSub;
}

int kConcatenationMaxSum(int* arr, int arrSize, int k){
    long long res, sum, i;
    long long  maxSub=0;
    long long  maxPre=0;
    long long  maxPost=0;  
    if((arr == NULL) || (arrSize == 0)) {
        return 0;
    }
    sum = 0;
    // 得到数组和
    for(i = 0; i < arrSize; i++) {
        sum = sum + arr[i];
    }
    // 得到最大前子串
    sum = 0;
    for(i = 0; i < arrSize; i++) {
        sum = sum + arr[i];
         maxPre = MAX( maxPre, sum);
    }
    // 得到最大后子串
    sum = 0;
    for(i = arrSize - 1; i >= 0; i--) {
        sum = sum + arr[i];
         maxPost = MAX( maxPost, sum);
    }
    // 得到最大子串
    maxSub = MaxSub(arr, arrSize);
    if(k == 1) {
        res =  maxSub;
    } else {
        if(sum > 0) {
            res =  maxPost + (k - 2) * sum +  maxPre;
        } else {
            res =  maxPost +  maxPre;
        }
        res = MAX(res,  maxSub);
    }
    return res % MOD;
}

